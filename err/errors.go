package err

import (
	"fmt"
)

//revive:disable:error-naming
var (
	// NilPointer defines a nil pointer argument error.
	NilPointer = fmt.Errorf("invalid nil pointer")

	// Conversion defines a type conversion error.
	Conversion = fmt.Errorf("invalid type conversion")

	// NonFunctionFactory defines a service container registration err
	// that signals that the registration request was made with a
	// non-function service factory.
	NonFunctionFactory = fmt.Errorf("non-function factory")

	// FactoryWithoutResult defines a service container registration err
	// that signals that the registration request was made with a
	// function service factory that don't return a service.
	FactoryWithoutResult = fmt.Errorf("factory without result")

	// ServiceNotFound defines a service not found on the container.
	ServiceNotFound = fmt.Errorf("service not found")

	// Container defines a container error.
	Container = fmt.Errorf("service container error")
)

var (
	// ConfigPathNotFound defines a path in Config not found error.
	ConfigPathNotFound = fmt.Errorf("config path not found")

	// InvalidConfigFormat defines an error that signal an
	// unexpected/unknown config source decoder format.
	InvalidConfigFormat = fmt.Errorf("invalid config format")

	// InvalidConfigSource defines an error that signal an
	// unexpected/unknown config source type.
	InvalidConfigSource = fmt.Errorf("invalid config source type")

	// ConfigRestPathNotFound defines a config path not found err.
	ConfigRestPathNotFound = fmt.Errorf("rest path not found")

	// InvalidConfigSourceData defines an err that signal an
	// invalid source configuration data.
	InvalidConfigSourceData = fmt.Errorf("invalid config source data")

	// ConfigSourceNotFound defines a source config source not found err.
	ConfigSourceNotFound = fmt.Errorf("config source not found")

	// DuplicateConfigSource defines a duplicate config source
	// registration attempt.
	DuplicateConfigSource = fmt.Errorf("config source already registered")
)

var (
	// InvalidLogFormat defines an err that signal an invalid
	// log format.
	InvalidLogFormat = fmt.Errorf("invalid output log format")

	// InvalidLogLevel defines an error that signal an invalid
	// log level.
	InvalidLogLevel = fmt.Errorf("invalid log level")

	// InvalidLogStream defines an error that signal that the
	// requested stream was unable to be generated by the requested type.
	InvalidLogStream = fmt.Errorf("invalid log stream type")

	// InvalidLogConfig defines an error that signal that the
	// given log stream configuration was unable to be parsed correctly
	// enabling the log stream generation.
	InvalidLogConfig = fmt.Errorf("invalid log config")

	// DuplicateLogStream defines an error that signal that the
	// requested log stream to be registered have an id of an already
	// registered log stream.
	DuplicateLogStream = fmt.Errorf("stream already registered")
)

var (
	// DatabaseConfigNotFound defines an error that signal that the
	// configuration to the requested database connection was not found.
	DatabaseConfigNotFound = fmt.Errorf("database config not found")

	// UnknownDatabaseDialect defines an error that signal that the
	// requested database connection configured dialect is unknown.
	UnknownDatabaseDialect = fmt.Errorf("unknown database dialect")
)

var (
	// InvalidWatchdogConfig defines an error that signal that the
	// given watchdog configuration was unable to be parsed correctly.
	InvalidWatchdogConfig = fmt.Errorf("invalid watchdog config")

	// DuplicateWatchdogService defines an error that signal that the
	// given watchdog service is already registered.
	DuplicateWatchdogService = fmt.Errorf("duplicate watchdog service")
)

//revive:enable:error-naming
