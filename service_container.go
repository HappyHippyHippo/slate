package slate

import "io"

type serviceContainerEntry struct {
	id       string
	tags     []string
	factory  ServiceFactory
	instance any
}

func (e serviceContainerEntry) hasTag(tag string) bool {
	found := false
	for _, existent := range e.tags {
		if existent == tag {
			found = true
		}
	}
	return found
}

// ServiceContainer defines the structure that hold the application service
// factories and initialized services.
type ServiceContainer map[string]serviceContainerEntry

// Close clean up the container from all the stored objects.
// If the object has been already instantiated and implements the Closable
// interface, then the Close method will be called upon the removing instance.
func (c ServiceContainer) Close() error {
	return c.Clear()
}

// Has will check if an object is registered with the requested id.
// This does not mean that is instantiated. The instantiation is just executed
// when the instance is requested for the first time.
func (c ServiceContainer) Has(id string) bool {
	_, ok := c[id]
	return ok
}

// Remove will eliminate the object from the container.
// If the object has been already instantiated and implements the Closable
// interface, then the Close method will be called on the removing instance.
func (c ServiceContainer) Remove(id string) error {
	if entry, ok := c[id]; ok {
		if entry.instance != nil {
			if instance, ok := entry.instance.(io.Closer); ok {
				if err := instance.Close(); err != nil {
					return err
				}
			}
		}
		delete(c, id)
	}
	return nil
}

// Clear will eliminate all the registered object from the container.
func (c ServiceContainer) Clear() error {
	for id := range c {
		if err := c.Remove(id); err != nil {
			return err
		}
	}
	return nil
}

// Service will register a service factory used to return an instance
// generated by the given factory. This factory method will only be called
// once, meaning that everytime the service is requested, is always returned
// the same instance.
// If any object was registered previously with the requested id, then the
// object will be removed by calling the Remove method previously the storing
// of the new object factory.
func (c ServiceContainer) Service(id string, factory ServiceFactory, tags ...string) error {
	if factory == nil {
		return errNilPointer("factory")
	}

	if err := c.Remove(id); err != nil {
		return err
	}

	c[id] = serviceContainerEntry{
		id:   id,
		tags: tags,
		factory: func() (instance any, err error) {
			if c[id].instance != nil {
				return c[id].instance, nil
			}
			instance, err = factory()
			if err == nil {
				c[id] = serviceContainerEntry{
					id:       id,
					tags:     c[id].tags,
					factory:  c[id].factory,
					instance: instance,
				}
			}
			return instance, err
		},
		instance: nil,
	}

	return nil
}

// Factory will register a service factory used to return a new
// instance every time you request it.
// If any object was registered previously with the requested id, then the
// object will be removed by calling the Remove method previously the storing
// of the new object factory.
func (c ServiceContainer) Factory(id string, factory ServiceFactory, tags ...string) error {
	if factory == nil {
		return errNilPointer("factory")
	}

	if err := c.Remove(id); err != nil {
		return err
	}

	c[id] = serviceContainerEntry{
		id:       id,
		tags:     tags,
		factory:  factory,
		instance: nil,
	}

	return nil
}

// Get will retrieve the requested object from the container.
// If the object has not yet been instantiated, then the factory method
// will be executed to instantiate it.
func (c ServiceContainer) Get(id string) (any, error) {
	entry, ok := c[id]
	if !ok {
		return nil, errServiceNotFound(id)
	}
	return entry.factory()
}

// Tagged will retrieve the list of entries instances that where registered
// with a tag list containing the request teg.
func (c ServiceContainer) Tagged(tag string) ([]any, error) {
	var result []interface{}
	for id := range c {
		if c[id].hasTag(tag) {
			instance, err := c.Get(id)
			if err != nil {
				return nil, err
			}
			result = append(result, instance)
		}
	}

	return result, nil
}
